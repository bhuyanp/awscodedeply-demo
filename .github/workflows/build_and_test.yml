name: Build and Test with Maven

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  maven-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven
      - name: Build with Maven
        run: mvn -B package --file pom.xml
      # - name: Copy jar to staging
      #   run: mkdir staging && cd staging && mkdir target && cp target/sample*.jar target
      # - name: Copy Dockerfile to staging
      #   run: cp Dockerfile staging

      - name: Upload jar
        uses: actions/upload-artifact@v3
        with:
          name: jar
          path: target/sample*.jar

      - name: Upload docker file
        uses: actions/upload-artifact@v3
        with:
          name: dockerfil
          path: Dockerfile

  docker-build:
    needs: maven-build
    runs-on: ubuntu-latest
    steps:
      - name: Download Jar
        uses: actions/download-artifact@v3
        with:
          name: jar
          path: target/

      - name: Download DockerFile
        uses: actions/download-artifact@v3
        with:
          name: dockerfil

      - name: Display structure of downloaded files
        run: ls -R

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: prasanta-dev
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"

      - name: Build, tag, and push image to Amazon ECR
        env:
          REGISTRY: ${{ secrets.ECR_ADDRESS }}
          REPOSITORY: awscodebuild-demo
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo $REGISTRY
          echo $REPOSITORY
          echo $IMAGE_TAG
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
